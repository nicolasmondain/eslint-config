module.exports = {

	parserOptions: {

		ecmaVersion: 2021,
		ecmaFeatures: {
			jsx: true
		},
		sourceType: "module"

	},

	env: {

		es2021: true,
		browser: true,
		node: true,
		mocha: true

	},

	plugins: [

		"import",
		"node",
		"promise"
	],

	globals: {

		document: "readonly",
		navigator: "readonly",
		window: "readonly"

	},

	rules: {
		
		// Strict Mode
		// These rules relate to strict mode directives:

		strict: "error",

		// Possible Errors
		// These rules relate to possible syntax or logic errors in JavaScript code:

		"for-direction": "error",
		"getter-return": "error",
		"no-async-promise-executor": "error",
		"no-await-in-loop": "error",
		"no-compare-neg-zero": "error",
		"no-cond-assign": "error",
		"no-console": "warn",
		"no-constant-condition": "error",
		"no-control-regex": "error",
		"no-debugger": "warn",
		"no-dupe-args": "error",
		"no-dupe-else-if": "error",
		"no-dupe-keys": "error",
		"no-duplicate-case": "error",
		"no-empty": "error",
		"no-empty-character-class": "error",
		"no-ex-assign": "error",
		"no-extra-boolean-cast": "error",
		"no-extra-parens": ["warn", "all", { "nestedBinaryExpressions": false }],
		"no-extra-semi": "error",
		"no-func-assign": "error",
		"no-import-assign": "error",
		"no-inner-declarations": "error",
		"no-invalid-regexp": "error",
		"no-irregular-whitespace": [
			"error",
			{ skipTemplates: true, skipComments: true },
		],
		"no-loss-of-precision": "error",
		"no-misleading-character-class": "warn",
		"no-obj-calls": "error",
		"no-promise-executor-return": "error",
		"no-prototype-builtins": "error",
		"no-regex-spaces": "error",
		"no-setter-return": "error",
		"no-sparse-arrays": "error",
		"no-template-curly-in-string": "error",
		"no-unexpected-multiline": "error",
		"no-unreachable": "error",
		"no-unreachable-loop": "error",
		"no-unsafe-finally": "warn",
		"no-unsafe-negation": "error",
		"no-unsafe-optional-chaining": "error",
		"no-useless-backreference": "warn",
		"require-atomic-updates": "warn",
		"use-isnan": "error",
		"valid-typeof": "error",

		// Variables
		// These rules relate to variable declarations:

		"init-declarations": "error",
		"no-delete-var": "error",
		"no-label-var": "error",
		"no-restricted-globals": "error",
		"no-shadow": "error",
		"no-shadow-restricted-names": "error",
		"no-undef": "error",
		"no-undef-init": "error",
		"no-undefined": "error",
		"no-unused-vars": [
			"error",
			{
				args: "after-used",
				vars: "local",
				caughtErrors: "none",
			},
		],
		"no-use-before-define": "error",

		// Best Practices
		// These rules relate to better ways of doing things to help you avoid problems:

		"accessor-pairs": "error",
		"array-callback-return": "error",
		"block-scoped-var": "error",
		"class-methods-use-this": "warn",
		complexity: ["warn", { max: 20 }],
		"max-depth": ["warn", { max: 10 }],
		"max-params": ["warn", { max: 5 }],
		"max-nested-callbacks": ["warn", { max: 10 }],
		"max-statements": ["warn", 10, { ignoreTopLevelFunctions: true }],
		"max-lines": [
			"warn",
			{ max: 1000, skipBlankLines: true, skipComments: true },
		],
		"max-lines-per-function": [
			"warn",
			{ max: 100, skipBlankLines: true, skipComments: true, IIFEs: true },
		],
		"consistent-return": "warn",
		curly: "error",
		"default-case": "error",
		"default-case-last": "error",
		"default-param-last": "error",
		"dot-location": "off",
		"dot-notation": "error",
		eqeqeq: "error",
		"grouped-accessor-pairs": "error",
		"guard-for-in": "error",
		"max-classes-per-file": "error",
		"no-alert": "error",
		"no-caller": "error",
		"no-case-declarations": "error",
		"no-constructor-return": "error",
		"no-div-regex": "error",
		"no-else-return": "error",
		"no-empty-function": ["warn", { allow: ["arrowFunctions"] }],
		"no-empty-pattern": "error",
		"no-eq-null": "error",
		"no-eval": "error",
		"no-extend-native": "error",
		"no-extra-bind": "error",
		"no-extra-label": "error",
		"no-fallthrough": "error",
		"no-floating-decimal": "error",
		"no-global-assign": "error",
		"no-implicit-coercion": "error",
		"no-implicit-globals": "error",
		"no-implied-eval": "error",
		"no-invalid-this": "error",
		"no-iterator": "error",
		"no-labels": "error",
		"no-lone-blocks": "error",
		"no-loop-func": "error",
		"no-magic-numbers": ["warn", { ignoreArrayIndexes: true, ignore: [-1, 0, 1, 2] }],
		"no-multi-spaces": "off",
		"no-multi-str": "error",
		"no-new": "error",
		"no-new-func": "error",
		"no-new-wrappers": "error",
		"no-nonoctal-decimal-escape": "error",
		"no-octal": "error",
		"no-octal-escape": "error",
		"no-param-reassign": "error",
		"no-proto": "error",
		"no-redeclare": "error",
		"no-restricted-properties": "error",
		"no-return-assign": "error",
		"no-return-await": "error",
		"no-script-url": "error",
		"no-self-assign": "error",
		"no-self-compare": "error",
		"no-sequences": "error",
		"no-throw-literal": "error",
		"no-unmodified-loop-condition": "error",
		"no-unused-expressions": "error",
		"no-unused-labels": "error",
		"no-useless-call": "error",
		"no-useless-catch": "error",
		"no-useless-concat": "error",
		"no-useless-escape": "error",
		"no-useless-return": "error",
		"no-void": "error",
		"no-warning-comments": "error",
		"no-with": "error",
		"prefer-named-capture-group": "warn",
		"prefer-promise-reject-errors": "error",
		"prefer-regex-literals": "error",
		radix: "error",
		"require-await": "error",
		"require-unicode-regexp": "error",
		"vars-on-top": "error",
		"wrap-iife": ["error", "inside"],
		yoda: "error",

		// ECMAScript 6
		// These rules relate to ES6, also known as ES2015:

		"arrow-body-style": [
			"error",
			"as-needed",
			{ requireReturnForObjectLiteral: true },
		],
		"arrow-parens": "error",
		"arrow-spacing": ["error", { before: true, after: true }],
		"constructor-super": "error",
		"dot-notation": ["error", { allowPattern: "^[a-z]+(_[a-z]+)+$" }],
		"generator-star-spacing": "error",
		"implicit-arrow-linebreak": "off",
		"no-class-assign": "error",
		"no-confusing-arrow": "error",
		"no-const-assign": "error",
		"no-dupe-class-members": "error",
		"no-duplicate-imports": "error",
		"no-iterator": "error",
		"no-new-symbol": "error",
		"no-restricted-exports": "error",
		"no-restricted-imports": "error",
		"no-this-before-super": "error",
		"no-useless-computed-key": "error",
		"no-useless-constructor": "error",
		"no-useless-rename": "error",
		"no-var": "warn",
		"object-shorthand": "error",
		"prefer-arrow-callback": "error",
		"prefer-const": [
			"error",
			{ destructuring: "any", ignoreReadBeforeAssign: false },
		],
		"prefer-destructuring": ["error", { object: true, array: false }],
		"prefer-numeric-literals": "warn",
		"prefer-rest-params": "warn",
		"prefer-spread": "error",
		"prefer-template": "error",
		"require-yield": "warn",
		"rest-spread-spacing": "warn",
		"sort-imports": ["warn", { ignoreCase: true, allowSeparatedGroups: true }],
		"symbol-description": "warn",
		"template-curly-spacing": ["warn", "never"],
		"yield-star-spacing": "warn",

		// Stylistic Issues
		// These rules relate to style guidelines, and are therefore quite subjective:

		"array-bracket-newline": "off",
		"array-bracket-spacing": "error",
		"array-element-newline": ["error", "consistent"],
		"block-spacing": "error",
		"brace-style": [
			"error",
			"1tbs",
			{
				allowSingleLine: true,
			},
		],
		camelcase: [
			"error",
			{
				properties: "never",
				ignoreGlobals: true,
			},
		],
		"capitalized-comments": "off",
		"comma-dangle": "error",
		"comma-spacing": "error",
		"comma-style": "error",
		"computed-property-spacing": "error",
		"consistent-this": ["error", "self"],
		"eol-last": "error",
		"func-call-spacing": "error",
		"func-name-matching": "error",
		"func-names": ["error", "as-needed"],
		"func-style": ["error", "expression"],
		"function-call-argument-newline": ["error", "consistent"],
		"function-paren-newline": ["error", "consistent"],
		"id-denylist": "off",
		"id-length": "off",

		// "id-length": ["error", { 
		// 	min: 2, 
		// 	max: 30, 
		// 	properties: "never",
		// 	exceptions: ["x", "y", "h", "w", "a"],
		// 	exceptionPatterns: ["/(?<=const[ ]+|import[ ]+)[a-zA-Z\_]{1,2}(?=[ ]+\=[ ]+require|[ ]+from[ ]+)/g"]
		// }],

		"id-match": "off",
		"implicit-arrow-linebreak": "error",
		indent: "off",
		"jsx-quotes": ["error", "prefer-double"],
		"key-spacing": ["error", { align: "colon" }],
		"keyword-spacing": [
			"error",
			{
				overrides: {
					catch: {
						before: false,
						after: false,
					},
					else: {
						before: false,
						after: false,
					},
					finally: {
						before: false,
						after: false,
					},
					for: {
						before: false,
						after: false,
					},
					function: {
						before: false,
						after: false,
					},
					if: {
						before: false,
						after: false,
					},
					in: {
						before: false,
						after: false,
					},
					instanceof: {
						before: false,
						after: false,
					},
					new: {
						before: false,
						after: false,
					},
					return: {
						before: false,
						after: false,
					},
					switch: {
						before: false,
						after: false,
					},
					throw: {
						before: false,
						after: false,
					},
					try: {
						before: false,
						after: false,
					},
					typeof: {
						before: false,
						after: false,
					},
					while: {
						before: false,
						after: false,
					},
				},
			},
		],
		"line-comment-position": "off",
		"linebreak-style": "off",
		"lines-around-comment": [
			"error",
			{ afterBlockComment: true, afterBlockComment: true },
		],
		"lines-between-class-members": "off",
		"max-depth": ["error", 4],
		"max-len": ["warn", { code: 250, comments: 250 }],
		"max-lines": ["warn", { max: 500, skipComments: true }],
		"max-lines-per-function": [
			"warn",
			{ max: 50, skipBlankLines: true, skipComments: true, IIFEs: true },
		],
		"max-nested-callbacks": ["warn", 10],
		"max-params": ["warn", 5],
		"max-statements": ["warn", 20, { "ignoreTopLevelFunctions": true }],
		"max-statements-per-line": ["warn", { max: 1 }],
		"multiline-comment-style": "off",
		"multiline-ternary": "off",
		"new-cap": ["error", { newIsCap: true }],
		"new-parens": ["error", "always"],
		"newline-per-chained-call": ["error", { ignoreChainWithDepth: 3 }],
		"no-array-constructor": "off",
		"no-bitwise": "error",
		"no-continue": "error",
		"no-inline-comments": "off",
		"no-lonely-if": "error",
		"no-mixed-operators": "error",
		"no-mixed-spaces-and-tabs": "error",
		"no-multi-assign": "error",
		"no-multiple-empty-lines": "error",
		"no-negated-condition": "error",
		"no-nested-ternary": "error",
		"no-new-object": "error",
		"no-plusplus": "error",
		"no-restricted-syntax": "off",
		"no-tabs": "off",
		"no-ternary": "off",
		"no-trailing-spaces": ["error", {"skipBlankLines": true, "ignoreComments": true}],
		"no-underscore-dangle": "off",
		"no-unneeded-ternary": "error",
		"no-whitespace-before-property": "error",
		"nonblock-statement-body-position": "off",
		"object-curly-newline": ["error", {"consistent": true}],
		"object-curly-spacing": "error",
		"object-property-newline": ["error", { "allowAllPropertiesOnSameLine": true }],
		"one-var": ["error", "never"],
		"one-var-declaration-per-line": "off",
		"operator-assignment": ["error", "always"],
		"operator-linebreak": ["error", "before"],
		"padded-blocks": "error",
		"padding-line-between-statements": [
			"error",
			{ blankLine: "always", prev: ["const", "let", "var"], next: "*" },
			{
				blankLine: "any",
				prev: ["const", "let", "var"],
				next: ["const", "let", "var"],
			}
		],
		"prefer-exponentiation-operator": "error",
		"prefer-object-spread": "off",
		"quote-props": ["error", "consistent-as-needed"],
		quotes: [
			"error",
			"single",
			{
				allowTemplateLiterals: true,
			},
		],
		semi: "error",
		"semi-spacing": "error",
		"semi-style": "error",
		"sort-keys": "off",
		"sort-vars": ["error", { ignoreCase: true }],
		"space-before-blocks": "off",
		"space-before-function-paren": ["error", "never"],
		"space-in-parens": ["error", "never"],
		"space-infix-ops": "error",
		"space-unary-ops": "off",
		"spaced-comment": "off",
		"switch-colon-spacing": "error",
		"template-tag-spacing": "error",
		"unicode-bom": "off",
		"wrap-regex": "error",
	}
};
